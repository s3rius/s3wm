import logging
from typing import Callable, Dict, Tuple, Union

from src.config import combinations
from src.s3wm_types import KeyCombination
from Xlib import X
from Xlib.display import Display
from Xlib.protocol.event import KeyPress

keycode_mapping: Dict[Tuple, KeyCombination] = {}
logger = logging.getLogger(__name__)


def init_keymap(display: Display):
    """
    Sends requests to the X Server to listen for specific key events.
     When the key combination is pressed the application will get the event about it.
    :param display: Used to manipulate keysym to keycode transitions.
    """
    for button in [1, 3]:
        display.screen().root.grab_button(
            button,
            X.Mod1Mask,
            True,
            X.ButtonPressMask,
            X.GrabModeAsync,
            X.GrabModeAsync,
            X.NONE,
            X.NONE,
        )

    # Registering all keybindings to X11.
    for combination in combinations:
        # Getting code for key on current keyboard.
        codes = set(code for code, index in display.keysym_to_keycodes(combination.key))

        for code in codes:
            logger.debug(combination)
            display.screen().root.grab_key(
                code, combination.modifiers, 1, X.GrabModeAsync, X.GrabModeAsync
            )
            keycode_mapping[(code, combination.modifiers)] = combination


def get_key_action(key_event: KeyPress) -> Union[str, Callable]:
    """
    Function to get the action defined in `combinations` by keypress event.
    :param key_event: event generated by X11.
    :return: Action associated with keypress event.
    """
    key = key_event.detail
    modifiers = key_event.state
    combination = keycode_mapping.get((key, modifiers))
    if combination:
        return combination.action
